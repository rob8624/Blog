# Generated by Django 4.1.8 on 2023-09-18 19:59

from django.db import migrations, models


def forwards_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    wagtail_image_model = apps.get_model('wagtailimages', 'Image')
    # Change the pages with your project's app name and also model name if different
    extended_image_model = apps.get_model('home', 'CustomImage')
    tagged_item_model = apps.get_model('taggit', 'TaggedItem')
    django_content_type = apps.get_model('contenttypes', 'contenttype')

    db_alias = schema_editor.connection.alias

    # Get images stored in default wagtail image model
    images = wagtail_image_model.objects.using(db_alias).all()
    new_images = []
    for image in images:
        new_images.append(extended_image_model(
            id=image.id,
            title=image.title,
            file=image.file,
            width=image.width,
            height=image.height,
            created_at=image.created_at,
            focal_point_x=image.focal_point_x,
            focal_point_y=image.focal_point_y,
            focal_point_width=image.focal_point_width,
            focal_point_height=image.focal_point_height,
            file_size=image.file_size,
            collection=image.collection,
            uploaded_by_user=image.uploaded_by_user,
        ))

    # Create images in new model
    extended_image_model.objects.using(db_alias).bulk_create(new_images)
    # Leave all images in previous model

    # Move tags from old image to new image model. Moving tags is
    # a little different case. The lookup table taggit_taggeditem looks like this:
    # id   object_id   content_type_id   tag_id
    # 1    1           10                 1
    # 2    1           10                 2
    # 3    1           10                 3
    # 4    1           10                 4
    # In our case, the object_id will be same for old and new image model
    # objects. So, we have to only change the content_type_id
    ct_extended_model, created = django_content_type.objects.using(db_alias).get_or_create(
        app_label='home',
        model='customimage'
    )
    ct_wagtail_model = django_content_type.objects.using(db_alias).get(
        app_label='wagtailimages',
        model='image'
    )

    tagged_item_model.objects.using(db_alias).filter(
        content_type_id=ct_wagtail_model.id).update(
            content_type_id=ct_extended_model.id
    )


def reverse_func(apps, schema_editor):
    # We get the model from the versioned app registry;
    extended_image_model = apps.get_model('home', 'CustomImage')
    tagged_item_model = apps.get_model('taggit', 'TaggedItem')
    django_content_type = apps.get_model('contenttypes', 'contenttype')

    db_alias = schema_editor.connection.alias

    # Move tags from new image model to old wagtail model
    ct_extended_model = django_content_type.objects.using(db_alias).get(
        app_label='home',
        model='customimage'
    )
    ct_wagtail_model = django_content_type.objects.using(db_alias).get(
        app_label='wagtailimages',
        model='image'
    )

    tagged_item_model.objects.using(db_alias).filter(
        content_type_id=ct_extended_model.id).update(
            content_type_id=ct_wagtail_model.id
    )

    # Delete all images created in the new model
    extended_image_model.objects.using(db_alias).all().delete()






class Migration(migrations.Migration):

    dependencies = [
        ('home', '0033_customimage_camera'),
        ('blog', '0024_authorsocials_network'),
    ]

    operations = [migrations.RunPython(forwards_func, reverse_func),
    ]
